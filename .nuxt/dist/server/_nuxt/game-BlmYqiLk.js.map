{"version":3,"file":"game-BlmYqiLk.js","sources":["../../../../components/BoggleBoard.vue","../../../../utils/letters.ts","../../../../utils/dictionary-hr.ts","../../../../pages/game.vue"],"sourcesContent":["<template>\n  <div class=\"w-full max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg mx-auto\">\n    <div class=\"p-3 border-[12px] border-orange-500 rounded-2xl bg-transparent\">\n      <div class=\"grid grid-cols-4 gap-2 select-none transition filter\"\n           :class=\"{ 'blur-md': blurred }\">\n        <button\n          v-for=\"(cell, idx) in board\"\n          :key=\"idx\"\n          type=\"button\"\n          class=\"aspect-square rounded-lg bg-white border border-slate-300 grid place-items-center text-2xl sm:text-3xl font-extrabold tracking-wide text-black focus:outline-none\"\n          :class=\"[\n            disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:shadow',\n            selectedSet.has(idx) ? 'ring-4 ring-emerald-500 bg-emerald-100' : ''\n          ]\"\n          :style=\"{ transform: `rotate(${rotations[idx] ?? 0}deg)` }\"\n          @click=\"onClick(idx)\"\n        >\n          {{ cell }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst props = defineProps<{ board: string[]; disabled?: boolean; blurred?: boolean; selected?: number[] }>()\nconst emit = defineEmits<{ (e: 'cell-click', index: number): void }>()\n\nconst rotations = ref<number[]>([])\nconst selectedSet = computed(() => new Set(props.selected ?? []))\n\nfunction regenRotations() {\n  const choices = [0, 90, 180, 270]\n  rotations.value = props.board.map(() => choices[Math.floor(Math.random() * choices.length)])\n}\n\nwatch(\n  () => props.board,\n  () => regenRotations(),\n  { immediate: true }\n)\n\nfunction onClick(idx: number) {\n  if (props.disabled) return\n  emit('cell-click', idx)\n}\n</script>\n","export const LETTERS = [\n  'A','B','C','Č','Ć','D','DŽ','Đ','E','F','G','H','I','J','K','L','LJ','M','N','NJ','O','P','R','S','Š','T','U','V','Z','Ž'\n] as const\n\nexport type Letter = typeof LETTERS[number]\n\n// Distribucija slova (učestalost) za hrvatsku verziju Boggle igre\nexport const LETTER_WEIGHTS: Record<Letter, number> = {\n  A: 9,\n  B: 2,\n  C: 3,\n  Č: 1,\n  Ć: 1,\n  D: 4,\n  DŽ: 1,\n  Đ: 1,\n  E: 9,\n  F: 1,\n  G: 2,\n  H: 2,\n  I: 8,\n  J: 4,\n  K: 4,\n  L: 4,\n  LJ: 1,\n  M: 3,\n  N: 5,\n  NJ: 1,\n  O: 8,\n  P: 3,\n  R: 5,\n  S: 5,\n  Š: 1,\n  T: 5,\n  U: 4,\n  V: 3,\n  Z: 2,\n  Ž: 1\n}\n\n// 1. Ukupni broj znakova (zbroj težina)\nexport const TOTAL_WEIGHT = Object.values(LETTER_WEIGHTS).reduce((a, b) => a + b, 0)\n\n// 2. Vjerojatnosti pojave svakog znaka\nexport const PROBABILITIES: Record<Letter, number> = Object.fromEntries(\n  Object.entries(LETTER_WEIGHTS).map(([letter, freq]) => [letter, (freq as number) / TOTAL_WEIGHT])\n) as Record<Letter, number>\n\n// Eksplicitni nazivi kako je traženo u primjeru\nexport const totalLetters = TOTAL_WEIGHT\nexport const probabilities: Record<Letter, number> = PROBABILITIES\n\n// Generiraj 4x4 ploču uz ponderiranu distribuciju i max 3 pojave po slovu\n// 4. Funkcija za generiranje NxN ploče (default 4x4)\nexport function generateBoard(size = 4, seed?: number): Letter[] {\n  const cells = Math.max(1, Math.floor(size)) * Math.max(1, Math.floor(size))\n  const rng = mulberry32(seed ?? Math.floor(Math.random() * 2 ** 31))\n  const counts = new Map<Letter, number>()\n  const board: Letter[] = []\n  while (board.length < cells) {\n    const pick = pickWeightedFromRecord(LETTER_WEIGHTS, rng)\n    const used = counts.get(pick) ?? 0\n    if (used < 3) {\n      counts.set(pick, used + 1)\n      board.push(pick)\n    }\n  }\n  return shuffle(board, rng)\n}\n\nfunction pickWeightedFromRecord(weights: Record<Letter, number>, rng: () => number): Letter {\n  let r = rng() * TOTAL_WEIGHT\n  for (const letter of LETTERS) {\n    const w = weights[letter]\n    if ((r -= w) <= 0) return letter\n  }\n  return LETTERS[LETTERS.length - 1]\n}\n\n// 3. Funkcija za odabir slučajnog slova prema distribuciji\nexport function getRandomLetter(): Letter {\n  return pickWeightedFromRecord(LETTER_WEIGHTS, Math.random)\n}\n\n// Alternativno: izbor prema već izračunatim vjerojatnostima (kumulativno)\nexport function getRandomLetterByProbabilities(): Letter {\n  const rand = Math.random()\n  let cumulative = 0\n  for (const [letter, prob] of Object.entries(PROBABILITIES) as [Letter, number][]) {\n    cumulative += prob\n    if (rand < cumulative) return letter\n  }\n  return LETTERS[LETTERS.length - 1]\n}\n\nfunction shuffle<T>(arr: T[], rng: () => number): T[] {\n  const a = arr.slice()\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(rng() * (i + 1))\n    ;[a[i], a[j]] = [a[j], a[i]]\n  }\n  return a\n}\n\n// Small deterministic PRNG\nfunction mulberry32(a: number) {\n  return function() {\n    let t = (a += 0x6D2B79F5)\n    t = Math.imul(t ^ (t >>> 15), t | 1)\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61)\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296\n  }\n}\n","// Minimal offline hrvatski rječnik (primjeri). Proširi po potrebi.\n// Sva slova u UPPERCASE, uključujući digrafe: LJ, NJ, DŽ\n\nconst WORDS = [\n  'DOM','KUCA','KUĆA','KUĆA','RIBA','MORE','PLAN','STAN','GRAD','VODA','ZORA','ZUB','ZBUN','TRAVA','STOL','STOLAC','KRUG',\n  'SUNCE','MJESEC','ZVIJEZDA','ZVEZDA','LJUBAV','NJIVA','DŽEM','DŽEPNI','DŽEP','NJEGOV','LJETO','LJESTVE','LJILJAN',\n  'JABUKA','KRUH','KRUŠKA','KRUŽNO','ŠUMA','ŠUPA','ŠEĆER','SECER','ŽIRAFA','ŽELJA','ŽELJA','ČOVJEK','COVJEK','ĆUP','DJETE','DIJETE',\n  'IGRA','IGRATI','PISMO','PISATI','KNJIGA','KNJIGE','BRDO','POLJE','PUT','PUTOVANJE','RJEKA','RIJEKA','PTICA','PTICE',\n  'HLJEB','ZUBAR','DAN','DANI','NOĆ','NOC','SNIJEG','SNEG','LED','HLADNO','TOPLO','VATRA','DIM','TLO','ZEMLJA','NEBO'\n] as const\n\n// Normalizacija: trim + uppercase\nfunction norm(word: string): string {\n  return (word || '').trim().toUpperCase()\n}\n\nexport const HR_DICTIONARY = new Set<string>(WORDS.map(norm))\n\nexport function validateWordOffline(word: string): boolean {\n  const w = norm(word)\n  if (!w || w.length < 3) return false\n  return HR_DICTIONARY.has(w)\n}\n\n","<template>\n  <div class=\"min-h-screen p-4 sm:p-6\">\n    <div class=\"max-w-3xl mx-auto\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <NuxtLink to=\"/\" class=\"text-slate-300 hover:text-white\">← Nova igra</NuxtLink>\n        <h1 class=\"text-2xl font-bold\">Boggle</h1>\n        <div class=\"w-24\"></div>\n      </div>\n\n      <div class=\"bg-slate-800/70 rounded-xl p-4 sm:p-6 border border-slate-700\">\n        <!-- Desktop (sm+) header: timer left, controls right -->\n        <div class=\"hidden sm:flex items-center justify-between gap-2 mb-4\">\n          <div class=\"flex items-center gap-3\">\n            <span class=\"text-slate-300\">Preostalo vreme:</span>\n            <span :class=\"['text-2xl font-extrabold tabular-nums', danger ? 'text-red-400' : 'text-white']\">\n              {{ mm }}:{{ ss }}\n            </span>\n          </div>\n\n          <div class=\"flex items-center gap-2\">\n            <button class=\"px-3 py-2 rounded-lg bg-slate-700 hover:bg-slate-600 disabled:opacity-50\" :disabled=\"preparing || waiting || finished\" @click=\"togglePause\">\n              {{ paused ? 'Nastavi' : 'Pauziraj' }}\n            </button>\n            <button class=\"px-3 py-2 rounded-lg bg-brand hover:bg-brand-dark\" @click=\"requestNewGame\">Nova tabla</button>\n            <button class=\"px-3 py-2 rounded-lg bg-orange-600 hover:bg-orange-500\" @click=\"showRules = true\">Pravila</button>\n          </div>\n        </div>\n\n        <!-- Mobile (xs) timer above board -->\n        <div class=\"sm:hidden flex items-center justify-center gap-3 mb-3\">\n          <span class=\"text-slate-300\">Preostalo vreme:</span>\n          <span :class=\"['text-2xl font-extrabold tabular-nums', danger ? 'text-red-400' : 'text-white']\">\n            {{ mm }}:{{ ss }}\n          </span>\n        </div>\n\n        <div class=\"grid place-items-center py-2 relative\">\n          <BoggleBoard :board=\"board\" :disabled=\"paused || finished || preparing || waiting\" :blurred=\"paused || preparing || waiting\" :selected=\"selectedPath\" @cell-click=\"onCellClick\" />\n\n          <!-- Countdown overlay -->\n          <div v-if=\"preparing\" class=\"absolute inset-0 grid place-items-center\">\n            <div class=\"text-6xl sm:text-7xl font-black text-white/90 drop-shadow-[0_2px_8px_rgba(0,0,0,0.6)]\">\n              {{ countdown }}\n            </div>\n          </div>\n\n          <!-- Waiting to start overlay with Kreni button -->\n          <div v-else-if=\"waiting\" class=\"absolute inset-0 grid place-items-center\">\n            <button class=\"px-6 py-3 rounded-xl bg-emerald-600 hover:bg-emerald-500 text-white font-bold text-xl shadow-lg\" @click=\"startCountdown\">\n              Kreni\n            </button>\n          </div>\n\n          <!-- Paused overlay -->\n          <div v-else-if=\"paused && !finished\" class=\"absolute inset-0 grid place-items-center\">\n            <div class=\"px-4 py-2 rounded-xl bg-slate-900/70 border border-slate-700 text-white font-semibold\">\n              Pauzirano\n            </div>\n          </div>\n        </div>\n\n        <!-- Always below board: Dodaj + Poništi + Riječi -->\n        <div class=\"mt-4 flex items-center justify-center gap-2\">\n          <button class=\"px-4 py-2 rounded-lg bg-emerald-600 hover:bg-emerald-500 disabled:opacity-50\" :disabled=\"!canAddWord || validating\" @click=\"addWord\">{{ validating ? 'Provjera…' : 'Dodaj' }}</button>\n          <button class=\"px-4 py-2 rounded-lg bg-red-600 hover:bg-red-500 disabled:opacity-50\" :disabled=\"!hasSelection\" @click=\"clearSelection\">Poništi</button>\n          <button class=\"px-4 py-2 rounded-lg bg-slate-600 hover:bg-slate-500\" @click=\"showWords = true\">Riječi</button>\n        </div>\n\n        <!-- Mobile-only: other controls below them -->\n        <div class=\"sm:hidden mt-6 flex items-center justify-center gap-2\">\n          <button class=\"px-3 py-2 rounded-lg bg-slate-700 hover:bg-slate-600 disabled:opacity-50\" :disabled=\"preparing || waiting || finished\" @click=\"togglePause\">\n            {{ paused ? 'Nastavi' : 'Pauziraj' }}\n          </button>\n          <button class=\"px-3 py-2 rounded-lg bg-brand hover:bg-brand-dark\" @click=\"requestNewGame\">Nova tabla</button>\n          <button class=\"px-3 py-2 rounded-lg bg-orange-600 hover:bg-orange-500\" @click=\"showRules = true\">Pravila</button>\n        </div>\n        \n        <!-- Current word preview -->\n        <div class=\"mt-4 text-center text-lg text-slate-200\">\n          <span class=\"opacity-75\">Riječ:</span>\n          <span class=\"ml-2 font-bold\">{{ currentWord || '—' }}</span>\n          <span v-if=\"errorMsg\" class=\"block mt-1 text-sm text-red-400\">{{ errorMsg }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Pravila modal -->\n  <div v-if=\"showRules\" class=\"fixed inset-0 z-50\">\n    <div class=\"absolute inset-0 bg-black/60\" @click=\"showRules = false\"></div>\n    <div class=\"absolute inset-0 grid place-items-center p-4\">\n      <div class=\"w-full max-w-2xl bg-slate-900 border border-slate-700 rounded-2xl shadow-xl overflow-hidden\">\n        <div class=\"flex items-center justify-between px-5 py-4 border-b border-slate-700\">\n          <h2 class=\"text-xl font-bold\">Pravila</h2>\n          <button class=\"px-3 py-1 rounded-md bg-slate-700 hover:bg-slate-600\" @click=\"showRules = false\">Zatvori</button>\n        </div>\n        <div class=\"p-5 space-y-4 max-h-[70vh] overflow-auto text-slate-200\">\n          <div>\n            <h3 class=\"font-semibold mb-2\">Pravilnik za bodovanje riječi u hrvatskom Boggleu</h3>\n            <h4 class=\"font-semibold\">1. Osnovna pravila</h4>\n            <ul class=\"list-disc pl-6 space-y-1\">\n              <li>Riječ mora biti sastavljena od najmanje 3 slova.</li>\n              <li>Riječi se tvore povezivanjem susjednih slova na ploči (okomito, vodoravno, dijagonalno).</li>\n              <li>Svako polje može se koristiti samo jednom u istoj riječi.</li>\n              <li>Dopuštena su i dvoslovna slova (LJ, NJ, DŽ) – računaju se kao jedno slovo/polje.</li>\n              <li>Imena, kratice i strane riječi se ne priznaju, osim ako su uvrštene u standardne hrvatske rječnike.</li>\n            </ul>\n          </div>\n          <div>\n            <h4 class=\"font-semibold\">2. Bodovanje prema duljini riječi</h4>\n            <ul class=\"list-disc pl-6 space-y-1\">\n              <li>3 slova – 1 bod</li>\n              <li>4 slova – 2 boda</li>\n              <li>5 slova – 3 boda</li>\n              <li>6 slova – 4 boda</li>\n              <li>7 slova – 5 bodova</li>\n              <li>8+ slova – 11 bodova</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Riječi modal (timer ide dalje) -->\n  <div v-if=\"showWords\" class=\"fixed inset-0 z-50\">\n    <div class=\"absolute inset-0 bg-black/50\" @click=\"showWords = false\"></div>\n    <div class=\"absolute inset-0 grid place-items-center p-4\">\n      <div class=\"w-full max-w-xl bg-slate-900 border border-slate-700 rounded-2xl shadow-xl overflow-hidden\">\n        <div class=\"flex items-center justify-between px-5 py-4 border-b border-slate-700\">\n          <h2 class=\"text-xl font-bold\">Riječi ({{ words.length }})</h2>\n          <button class=\"px-3 py-1 rounded-md bg-slate-700 hover:bg-slate-600\" @click=\"showWords = false\">Zatvori</button>\n        </div>\n        <div class=\"p-5 max-h-[70vh] overflow-auto\">\n          <div v-if=\"!words.length\" class=\"text-slate-300\">Nema dodanih riječi.</div>\n          <ul v-else class=\"space-y-2\">\n            <li v-for=\"(w, i) in words\" :key=\"i\" class=\"flex items-center justify-between bg-slate-800/60 rounded-lg px-3 py-2\">\n              <span class=\"font-semibold\">{{ w }}</span>\n              <span class=\"text-slate-300\">{{ scoreForLength(w.length) }} bod(ova)</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Rezultat modal nakon isteka vremena -->\n  <div v-if=\"showScore\" class=\"fixed inset-0 z-50\">\n    <div class=\"absolute inset-0 bg-black/60\"></div>\n    <div class=\"absolute inset-0 grid place-items-center p-4\">\n      <div class=\"w-full max-w-xl bg-slate-900 border border-slate-700 rounded-2xl shadow-xl overflow-hidden\">\n        <div class=\"px-5 py-4 border-b border-slate-700\">\n          <h2 class=\"text-xl font-bold\">Vrijeme je isteklo!</h2>\n        </div>\n        <div class=\"p-5 space-y-4 max-h-[70vh] overflow-auto\">\n          <div class=\"flex items-center justify-between\">\n            <span class=\"text-lg\">Ukupan broj riječi:</span>\n            <span class=\"text-xl font-bold\">{{ words.length }}</span>\n          </div>\n          <div class=\"flex items-center justify-between\">\n            <span class=\"text-lg\">Ukupni bodovi:</span>\n            <span class=\"text-xl font-bold text-emerald-400\">{{ totalScore }}</span>\n          </div>\n          <div>\n            <h3 class=\"font-semibold mb-2\">Popis riječi</h3>\n            <ul class=\"space-y-1\">\n              <li v-for=\"(w, i) in words\" :key=\"i\" class=\"flex items-center justify-between bg-slate-800/60 rounded-lg px-3 py-2\">\n                <span class=\"font-semibold\">{{ w }}</span>\n                <span class=\"text-slate-300\">{{ scoreForLength(w.length) }} bod(ova)</span>\n              </li>\n            </ul>\n          </div>\n          <div class=\"pt-2 text-center\">\n            <button class=\"px-5 py-2 rounded-lg bg-brand hover:bg-brand-dark font-semibold\" @click=\"handleRestart\">Nova igra</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport BoggleBoard from '@/components/BoggleBoard.vue'\nimport { generateBoard } from '@/utils/letters'\nimport { validateWord } from '@/utils/validate'\n\nconst board = ref<string[]>([])\nconst totalSeconds = ref(180) // 3 minutes\nconst remaining = ref(totalSeconds.value)\nconst paused = ref(false)\nconst finished = ref(false)\nconst preparing = ref(false)\nconst waiting = ref(true)\nconst countdown = ref(3)\nconst showRules = ref(false)\nconst showWords = ref(false)\nconst showScore = ref(false)\nconst words = ref<string[]>([])\nconst wordsSet = ref<Set<string>>(new Set())\nconst selectedPath = ref<number[]>([])\nconst errorMsg = ref('')\nconst danger = computed(() => remaining.value <= 20 && !finished.value)\nconst validating = ref(false)\nconst hasSelection = computed(() => selectedPath.value.length > 0)\n\nlet tickHandle: number | null = null\nlet dangerInterval: number | null = null\nlet countdownHandle: number | null = null\n\nonMounted(() => {\n  newGame()\n})\n\nonBeforeUnmount(() => stopAllTimers())\n\nfunction newGame() {\n  stopAllTimers()\n  board.value = generateBoard()\n  remaining.value = totalSeconds.value\n  finished.value = false\n  paused.value = false\n  words.value = []\n  wordsSet.value = new Set()\n  selectedPath.value = []\n  showScore.value = false\n  showWords.value = false\n  // Wait for user to press Kreni, then show 3..2..1 and start timer\n  waiting.value = true\n  preparing.value = false\n  countdown.value = 3\n}\n\nfunction togglePause() {\n  if (finished.value) return\n  paused.value = !paused.value\n  if (paused.value) {\n    stopTick()\n    stopDangerSound()\n  } else {\n    startTick()\n  }\n}\n\nfunction startTick() {\n  stopTick()\n  tickHandle = window.setInterval(() => {\n    if (paused.value) return\n    if (remaining.value > 0) {\n      remaining.value -= 1\n      if (remaining.value === 20) startDangerSound()\n      if (remaining.value === 0) {\n        finished.value = true\n        stopDangerSound()\n        stopTick()\n        // Prikaži rezultat\n        showScore.value = true\n      }\n    }\n  }, 1000)\n}\n\nfunction stopTick() {\n  if (tickHandle) {\n    clearInterval(tickHandle)\n    tickHandle = null\n  }\n}\n\nfunction stopAllTimers() {\n  stopTick()\n  stopDangerSound()\n  if (countdownHandle) {\n    clearInterval(countdownHandle)\n    countdownHandle = null\n  }\n}\n\nfunction startCountdown() {\n  if (preparing.value || !waiting.value) return\n  preparing.value = true\n  waiting.value = false\n  countdown.value = 3\n  countdownHandle = window.setInterval(() => {\n    if (countdown.value > 1) {\n      countdown.value -= 1\n    } else {\n      clearInterval(countdownHandle!)\n      countdownHandle = null\n      preparing.value = false\n      startTick()\n    }\n  }, 1000)\n}\n\n// WebAudio danger beep (every ~1s in last 20s)\nlet audioCtx: AudioContext | null = null\n\nfunction startDangerSound() {\n  stopDangerSound()\n  if (!audioCtx) {\n    try { audioCtx = new (window.AudioContext || (window as any).webkitAudioContext)() } catch {}\n  }\n  if (!audioCtx) return\n  // schedule repeating beeps while in danger window\n  dangerInterval = window.setInterval(() => {\n    if (!danger.value || paused.value || finished.value) return\n    beep(480, 0.12)\n  }, 1000)\n}\n\nfunction stopDangerSound() {\n  if (dangerInterval) {\n    clearInterval(dangerInterval)\n    dangerInterval = null\n  }\n}\n\nfunction beep(freq: number, duration: number) {\n  if (!audioCtx) return\n  const t0 = audioCtx.currentTime\n  const osc = audioCtx.createOscillator()\n  const gain = audioCtx.createGain()\n  osc.type = 'square'\n  osc.frequency.value = freq\n  gain.gain.setValueAtTime(0.001, t0)\n  gain.gain.exponentialRampToValueAtTime(0.2, t0 + 0.01)\n  gain.gain.exponentialRampToValueAtTime(0.001, t0 + duration)\n  osc.connect(gain)\n  gain.connect(audioCtx.destination)\n  osc.start(t0)\n  osc.stop(t0 + duration + 0.02)\n}\n\nconst mm = computed(() => String(Math.floor(remaining.value / 60)).padStart(2, '0'))\nconst ss = computed(() => String(remaining.value % 60).padStart(2, '0'))\n\n// Single-player selection and words logic\nconst size = 4\nfunction rcFromIndex(i: number) { return { r: Math.floor(i / size), c: i % size } }\nfunction isAdjacent(a: number, b: number) {\n  const A = rcFromIndex(a), B = rcFromIndex(b)\n  const dr = Math.abs(A.r - B.r), dc = Math.abs(A.c - B.c)\n  return (dr !== 0 || dc !== 0) && dr <= 1 && dc <= 1\n}\n\nfunction onCellClick(idx: number) {\n  errorMsg.value = ''\n  if (waiting.value || preparing.value || paused.value || finished.value) return\n  const path = selectedPath.value\n  const last = path[path.length - 1]\n  const already = path.indexOf(idx)\n  if (already !== -1) {\n    // allow backtracking only if last\n    if (already === path.length - 1) {\n      path.pop()\n    }\n    return\n  }\n  if (path.length === 0 || isAdjacent(last, idx)) {\n    path.push(idx)\n  }\n}\n\nconst currentWord = computed(() => selectedPath.value.map(i => board.value[i]).join(''))\nconst canAddWord = computed(() => currentWord.value.length >= 3 && !wordsSet.value.has(currentWord.value))\n\nfunction scoreForLength(len: number) {\n  if (len >= 8) return 11\n  if (len === 7) return 5\n  if (len === 6) return 4\n  if (len === 5) return 3\n  if (len === 4) return 2\n  if (len === 3) return 1\n  return 0\n}\n\nconst totalScore = computed(() => words.value.reduce((sum, w) => sum + scoreForLength(w.length), 0))\n\nasync function addWord() {\n  const w = currentWord.value\n  if (w.length < 3) { errorMsg.value = 'Riječ mora imati najmanje 3 slova.'; selectedPath.value = []; return }\n  if (wordsSet.value.has(w)) { errorMsg.value = 'Riječ je već dodana.'; selectedPath.value = []; return }\n  validating.value = true\n  try {\n    const ok = await validateWord(w)\n    if (!ok) { errorMsg.value = 'Riječ nije pronađena u rječniku.'; selectedPath.value = []; return }\n    words.value.push(w)\n    wordsSet.value.add(w)\n    selectedPath.value = []\n  } catch (e) {\n    errorMsg.value = 'Greška pri provjeri riječi.'\n    selectedPath.value = []\n  } finally {\n    validating.value = false\n  }\n}\n\nfunction handleRestart() {\n  showScore.value = false\n  newGame()\n}\n\nfunction clearSelection() {\n  selectedPath.value = []\n  errorMsg.value = ''\n}\n\nfunction requestNewGame() {\n  // Traži potvrdu ako je igra u tijeku (nije završena i nije u stanju čekanja)\n  const inProgress = (!waiting.value || preparing.value || paused.value) && !finished.value && remaining.value > 0\n  if (inProgress) {\n    const ok = window.confirm('Prekinuti trenutnu igru i započeti novu?')\n    if (!ok) return\n  }\n  newGame()\n}\n</script>\n\n<style scoped>\n.tabular-nums { font-variant-numeric: tabular-nums; }\n</style>\n"],"names":["_ssrRenderAttrs","_mergeProps","blurred","board","disabled","_unref","_ssrRenderStyle","_push","_parent","_ssrIncludeBooleanAttr","_ssrInterpolate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,UAAM,QAAQ;AAGd,UAAM,YAAY,IAAc,EAAE;AAClC,UAAM,cAAc,SAAS,MAAM,IAAI,IAAI,MAAM,YAAY,CAAA,CAAE,CAAC;AAEhE,aAAS,iBAAiB;AACxB,YAAM,UAAU,CAAC,GAAG,IAAI,KAAK,GAAG;AAChC,gBAAU,QAAQ,MAAM,MAAM,IAAI,MAAM,QAAQ,KAAK,MAAM,KAAK,OAAA,IAAW,QAAQ,MAAM,CAAC,CAAC;AAAA,IAC7F;AAEA;AAAA,MACE,MAAM,MAAM;AAAA,MACZ,MAAM,eAAA;AAAA,MACN,EAAE,WAAW,KAAA;AAAA,IAAK;;mBAtCbA,eAAAC,WAAA,EAAA,OAAM,iEAA6D,MAAA,CAAA,0HAG1CC,KAAAA,WAAO,sDAAA,CAAA;oBAEPC,KAAAA,OAAK,CAAnB,MAAM,QAAG;;UAIKC,KAAAA,WAAQ,kCAAA;AAAA,UAAgFC,MAAA,WAAA,EAAY,IAAI,GAAG,IAAA,2CAAA;AAAA,QAAA,oLAIlGC,eAAA,EAAA,WAAA,UAAAD,MAAA,SAAA,EAAU,GAAG,KAAA,CAAA,QAAA,qBAGzC,IAAI;;;;;;;;;;;;ACVV,MAAM,iBAAyC;AAAA,EACpD,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,IAAI;AAAA,EACJ,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,IAAI;AAAA,EACJ,GAAG;AAAA,EACH,GAAG;AAAA,EACH,IAAI;AAAA,EACJ,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AACL;AAGO,MAAM,eAAe,OAAO,OAAO,cAAc,EAAE,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC;AAG9B,OAAO;AAAA,EAC1D,OAAO,QAAQ,cAAc,EAAE,IAAI,CAAC,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAS,OAAkB,YAAY,CAAC;AAClG;AC3CA,MAAM,QAAQ;AAAA,EACZ;AAAA,EAAM;AAAA,EAAO;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAM;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAO;AAAA,EAAS;AAAA,EAClH;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAW;AAAA,EAAS;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAO;AAAA,EAAS;AAAA,EAAO;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAU;AAAA,EACxG;AAAA,EAAS;AAAA,EAAO;AAAA,EAAS;AAAA,EAAU;AAAA,EAAO;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAS;AAAA,EAAS;AAAA,EAAM;AAAA,EAAQ;AAAA,EAC3H;AAAA,EAAO;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAS;AAAA,EAAS;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAM;AAAA,EAAY;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAQ;AAAA,EAC7G;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAM;AAAA,EAAO;AAAA,EAAM;AAAA,EAAM;AAAA,EAAS;AAAA,EAAO;AAAA,EAAM;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAM;AAAA,EAAM;AAAA,EAAS;AAC/G;AAGA,SAAS,KAAK,MAAsB;AAClC,UAAQ,QAAQ,IAAI,KAAA,EAAO,YAAA;AAC7B;AAE6B,IAAI,IAAY,MAAM,IAAI,IAAI,CAAC;ACiU5D,MAAM,OAAO;;;;;AAvJb,UAAM,QAAQ,IAAc,EAAE;AAC9B,UAAM,eAAe,IAAI,GAAG;AAC5B,UAAM,YAAY,IAAI,aAAa,KAAK;AACxC,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,WAAW,IAAI,KAAK;AAC1B,UAAM,YAAY,IAAI,KAAK;AAC3B,UAAM,UAAU,IAAI,IAAI;AACxB,UAAM,YAAY,IAAI,CAAC;AACvB,UAAM,YAAY,IAAI,KAAK;AAC3B,UAAM,YAAY,IAAI,KAAK;AAC3B,UAAM,YAAY,IAAI,KAAK;AAC3B,UAAM,QAAQ,IAAc,EAAE;AAC9B,UAAM,WAAW,IAAiB,oBAAI,KAAK;AAC3C,UAAM,eAAe,IAAc,EAAE;AACrC,UAAM,WAAW,IAAI,EAAE;AACvB,UAAM,SAAS,SAAS,MAAM,UAAU,SAAS,MAAM,CAAC,SAAS,KAAK;AACtE,UAAM,aAAa,IAAI,KAAK;AAC5B,UAAM,eAAe,SAAS,MAAM,aAAa,MAAM,SAAS,CAAC;AAkIjE,UAAM,KAAK,SAAS,MAAM,OAAO,KAAK,MAAM,UAAU,QAAQ,EAAE,CAAC,EAAE,SAAS,GAAG,GAAG,CAAC;AACnF,UAAM,KAAK,SAAS,MAAM,OAAO,UAAU,QAAQ,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AAIvE,aAAS,YAAY,GAAW;AAAE,aAAO,EAAE,GAAG,KAAK,MAAM,IAAI,IAAI,GAAG,GAAG,IAAI,KAAA;AAAA,IAAO;AAClF,aAAS,WAAW,GAAW,GAAW;AACxC,YAAM,IAAI,YAAY,CAAC,GAAG,IAAI,YAAY,CAAC;AAC3C,YAAM,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,CAAC,GAAG,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,CAAC;AACvD,cAAQ,OAAO,KAAK,OAAO,MAAM,MAAM,KAAK,MAAM;AAAA,IACpD;AAEA,aAAS,YAAY,KAAa;AAChC,eAAS,QAAQ;AACjB,UAAI,QAAQ,SAAS,UAAU,SAAS,OAAO,SAAS,SAAS,MAAO;AACxE,YAAM,OAAO,aAAa;AAC1B,YAAM,OAAO,KAAK,KAAK,SAAS,CAAC;AACjC,YAAM,UAAU,KAAK,QAAQ,GAAG;AAChC,UAAI,YAAY,IAAI;AAElB,YAAI,YAAY,KAAK,SAAS,GAAG;AAC/B,eAAK,IAAA;AAAA,QACP;AACA;AAAA,MACF;AACA,UAAI,KAAK,WAAW,KAAK,WAAW,MAAM,GAAG,GAAG;AAC9C,aAAK,KAAK,GAAG;AAAA,MACf;AAAA,IACF;AAEA,UAAM,cAAc,SAAS,MAAM,aAAa,MAAM,IAAI,CAAA,MAAK,MAAM,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;AACvF,UAAM,aAAa,SAAS,MAAM,YAAY,MAAM,UAAU,KAAK,CAAC,SAAS,MAAM,IAAI,YAAY,KAAK,CAAC;AAEzG,aAAS,eAAe,KAAa;AACnC,UAAI,OAAO,EAAG,QAAO;AACrB,UAAI,QAAQ,EAAG,QAAO;AACtB,UAAI,QAAQ,EAAG,QAAO;AACtB,UAAI,QAAQ,EAAG,QAAO;AACtB,UAAI,QAAQ,EAAG,QAAO;AACtB,UAAI,QAAQ,EAAG,QAAO;AACtB,aAAO;AAAA,IACT;AAEA,UAAM,aAAa,SAAS,MAAM,MAAM,MAAM,OAAO,CAAC,KAAK,MAAM,MAAM,eAAe,EAAE,MAAM,GAAG,CAAC,CAAC;;;;;QApXjF,IAAG;AAAA,QAAI,OAAM;AAAA,MAAA;yBAAvB,CAA+E,GAAAE,QAAAC,UAAA,aAAA;;;;;8BAAtB,aAAW;AAAA,YAAA;AAAA;;;;oeAUTH,MAAA,MAAA,IAAM,iBAAA,YAAA,CAAA,qCACxDA,MAAA,EAAA,CAAE,oBAAOA,MAAA,EAAA,CAAE,oLAKoFA,MAAA,SAAA,KAAaA,MAAA,OAAA,KAAWA,MAAA,QAAA,CAAQ,IAAA,cAAA,qCAC/HA,MAAA,MAAA,IAAM,YAAA,UAAA,icAU0CA,MAAA,MAAA,IAAM,iBAAA,YAAA,CAAA,qCACxDA,MAAA,EAAA,CAAE,oBAAOA,MAAA,EAAA,CAAE;;QAKF,OAAOA,MAAA,KAAA;AAAA,QAAQ,UAAUA,MAAA,MAAA,KAAUA,mBAAYA,MAAA,SAAA,KAAaA,MAAA,OAAA;AAAA,QAAU,SAASA,MAAA,MAAA,KAAUA,MAAA,SAAA,KAAaA,MAAA,OAAA;AAAA,QAAU,UAAUA,MAAA,YAAA;AAAA,QAAe;AAAA,MAAA;UAG5IA,MAAA,SAAA,GAAS;yNAEbA,MAAA,SAAA,CAAS,CAAA,cAAA;AAAA,iBAKAA,MAAA,OAAA,GAAO;;MAOP,WAAAA,MAAA,MAAA,MAAWA,MAAA,QAAA,GAAQ;;;;;0LASsEI,sBAAA,CAAAJ,MAAA,UAAA,KAAcA,MAAA,UAAA,CAAU,IAAA,cAAA,qCAAsBA,MAAA,UAAA,IAAU,cAAA,OAAA,wHAChEA,MAAA,YAAA,CAAY,IAAA,cAAA,iVAMTA,MAAA,SAAA,KAAaA,MAAA,OAAA,KAAWA,MAAA,QAAA,CAAQ,IAAA,cAAA,qCAC/HA,MAAA,MAAA,IAAM,YAAA,UAAA,sZASqBA,MAAA,WAAA,KAAW,GAAA;UAC/BA,MAAA,QAAA,GAAQ;8FAA6CA,MAAA,QAAA,CAAQ,CAAA,SAAA;AAAA;;;;UAOtEA,MAAA,SAAA,GAAS;;;;;UAqCTA,MAAA,SAAA,GAAS;AAK6B,cAAA,8cAAAK,eAAAL,MAAA,KAAA,EAAM,MAAM,CAAA,+KAAA;AAIzC,YAAA,CAAAA,MAAA,KAAA,EAAM,QAAM;;;;wBAEDA,MAAA,KAAA,GAAK,CAAd,GAAG,MAAC;mLACiB,CAAC,uEACA,eAAe,EAAE,MAAM,CAAA;;;;;;;;UASxDA,MAAA,SAAA,GAAS;qsBAUyBK,eAAAL,MAAA,KAAA,EAAM,MAAM,2NAIKA,MAAA,UAAA,CAAU;sBAKvCA,MAAA,KAAA,GAAK,CAAd,GAAG,MAAC;iLACiB,CAAC,uEACA,eAAe,EAAE,MAAM,CAAA;;;;;;;;;;;;;;;;;"}